<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nio on LinKer's Blog</title><link>https://blog.000k.de/tags/nio/</link><description>Recent content in Nio on LinKer's Blog</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Wed, 21 May 2025 07:52:05 +0800</lastBuildDate><atom:link href="https://blog.000k.de/tags/nio/rss.xml" rel="self" type="application/rss+xml"/><item><title>新io：nio的学习</title><link>https://blog.000k.de/post/%E6%96%B0ionio%E7%9A%84%E5%AD%A6%E4%B9%A0/</link><pubDate>Wed, 21 May 2025 07:52:05 +0800</pubDate><guid>https://blog.000k.de/post/%E6%96%B0ionio%E7%9A%84%E5%AD%A6%E4%B9%A0/</guid><description>&lt;p>OIO是面向流（Stream Oriented）的，NIO是面向缓冲区（Buffer Oriented）的。&lt;/p>
&lt;p>与 Java IO 不同，Java NIO 是一个面向缓冲区的包。这意味着数据是从通道读取到缓冲区中，然后进一步处理。例如，一个线程请求通道将数据读取到缓冲区中，而在通道同时将数据读取到缓冲区的过程中，线程可以去做其他工作。一旦数据被读取到缓冲区，线程就可以继续处理在读取操作期间留下的工作。因此，NIO 是一种双向数据传输。&lt;/p></description></item></channel></rss>